// PEST parser definition for tidal mini-notations, based
// on the TidalCycles mini-notation parser by Alex McLean.

// numbers
number        = @{ minus? ~ int ~ frac? ~ exp? }
decimal_point = _{ "." }
digit1_9      = _{ '1'..'9' }
e             = _{ "e" | "E" }
exp           = _{ e ~ (minus | plus)? ~ ASCII_DIGIT+ }
frac          = _{ decimal_point ~ ASCII_DIGIT+ }
int           = _{ zero | (digit1_9 ~ ASCII_DIGIT*) }
minus         = _{ "-" }
plus          = _{ "+" }
zero          = _{ "0" }

// delimiters
comma = _{ "," }
pipe  = _{ "|" }
dot   = _{ "." }

// character classes
WHITESPACE = _{ " " | "\t" | "\u{A0}" }

// mini
step_char = _{ ASCII_ALPHA | ASCII_DIGIT | "~" | "-" | "#" | "." | "^" | "_" }
step      = @{ step_char+ }

sub_cycle       = { "[" ~ stack_or_choose ~ "]" }
polymeter       = { "{" ~ polymeter_stack ~ "}" ~ polymeter_steps? }
polymeter_steps = { "%" ~ slice }

slow_sequence = { "<" ~ polymeter_stack ~ ">" }

slice    = _{ step | sub_cycle | polymeter | slow_sequence }
slice_op = _{ op_weight | op_bjorklund | op_slow | op_fast | op_replicate | op_degrade | op_tail | op_range }

op_weight    = { ("@" | "_") ~ number }
op_replicate = { "!" }
op_bjorklund = { "(" ~ (slice_with_ops ~ comma)+ ~ slice_with_ops ~ ")" }
op_slow      = { "/" ~ number }
op_fast      = { "*" ~ number }
op_degrade   = { "?" ~ number }
op_tail      = { ":" ~ number }
op_range     = { ".." ~ number } // ???

slice_with_ops = _{ slice ~ slice_op* }
sequence       = _{ slice_with_ops+ }

stack_tail  = { (comma ~ sequence)+ }
choose_tail = { (pipe ~ sequence)+ }
dot_tail    = { (dot ~ sequence)+ }

stack_or_choose = _{ sequence ~ (stack_tail | choose_tail | dot_tail)? }
polymeter_stack = _{ sequence ~ stack_tail? }

mini = { SOI ~ stack_or_choose ~ EOI }
