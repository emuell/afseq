//! pest parser grammar for mini-notations, based
//! on the TidalCycles mini-notation parser by Alex McLean.

// define whitespaces as space, tab and non-breaking space
WHITESPACE = _{ " " | "\t" | "\u{A0}" }

/// numbers types allowing [ "1" "1.0" "1." ".1" ]
digit   = @{("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)}
integer = @{ "-"? ~ digit}
normal  = @{ "-"? ~ "." ~ digit }
float   = @{ "-"? ~ digit ~ "." ~ (digit)* }
// exp           = _{ ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+ }
number  = ${ (normal | float | integer) ~ !(ASCII_ALPHA) }

/// case-incensitive pitch type with note, optional octave and sharp or flat mark
octave  = { "10" | ASCII_DIGIT }
mark    = { "#"|"b" }
note    = ${ (^"a"|^"b"|^"c"|^"d"|^"e"|^"f"|^"g") }
pitch   = ${ note ~ mark? ~ octave? ~ !(ASCII_ALPHANUMERIC)}

/// type for empty steps
rest = { "~" ~ !(ASCII_ALPHANUMERIC) }

/// type for held steps
hold = { "_" ~ !(ASCII_ALPHANUMERIC) }

/// arbitrary string identifier type
name = { (ASCII_ALPHANUMERIC | "_")+ }

/// possible literals for single steps
single = { hold | rest | number | pitch | name }

/// operators
op_weight    = { ("@" | "_") ~ parameter }
op_replicate = { "!" }
op_bjorklund = { "(" ~ (parameter ~ ",")+ ~ parameter ~ ")" }
op_slow      = { "/" ~ parameter }
op_fast      = { "*" ~ parameter }
op_degrade   = { "?" ~ parameter }
op_tail      = { ":" ~ parameter }
op_range     = { ".." ~ parameter } // ???
op = _{ op_weight | op_bjorklund | op_slow | op_fast | op_replicate | op_degrade | op_tail | op_range }

/// groups
subdivision     = { "[" ~ (stack | choices | section)? ~ "]" }
alternating     = { "<" ~ (stack | section)? ~ ">" }
polymeter       = { "{" ~ (stack | section)? ~ "}" ~ polymeter_tail }
polymeter_tail  = { "%" ~  polymeter_count}
polymeter_count = { (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ !(ASCII_ALPHANUMERIC | "."))}

group     = _{ subdivision | alternating | polymeter }

// this should actually be { expr | group | number } at some point
/// parameter for expressions with operators
parameter = _{ number }

expr      = { (single | group) ~ op+ }

/// helper container that splits steps into sections
section   = { (expr | single | group)+ }

/// a single choice inside a choice list
choice    = { expr | single | group }
/// at least 2 choices, can only be inside subdivisions or the root
choices   = { (choice) ~ ("|" ~ choice)+ }

/// parallel sections of events found inside groups
stack     = { (section) ~ ("," ~ section)+ }

// shorthand for subdivisions
// split          = { (section) ~ ("." ~ section)+ }

/// the root of the cycle
mini = { SOI ~ ( stack | choices | section) ~ (EOI | NEWLINE) }
