//! pest parser grammar for mini-notations, based
//! on the TidalCycles mini-notation parser by Alex McLean.

// define whitespaces as space, tab, non-breaking space and newlines
WHITESPACE = _{ " " | "\t" | "\u{A0}" | NEWLINE }

/// numbers types allowing [ "1" "1.0" "1." ".1" "0x1a" "0xFF" ]
integer   = @{ "-"? ~ ((("0x" | "0X") ~ ASCII_HEX_DIGIT+) | ASCII_DIGIT+) }
float     = @{ "-"? ~ (ASCII_DIGIT ~ "." ~ ASCII_DIGIT*) | ("." ~ ASCII_DIGIT+) }
number    = ${ (float | integer) ~ !ASCII_ALPHA }

/// case-insensitive pitch type with note, optional octave and sharp or flat mark
octave  = { "10" | ASCII_DIGIT }
mark    = { "#"|"b" }
note    = ${ (^"a"|^"b"|^"c"|^"d"|^"e"|^"f"|^"g") }
pitch   = ${ note ~ mark? ~ octave? ~ !name}

/// chord as pitch with mode string, separated via "'"
mode    = ${ (ASCII_ALPHANUMERIC | "#" | "-" | "+" | "^")+ }
chord   = ${ pitch ~ "'" ~ mode }

/// type for empty steps
rest = @{ ("~" | "-") ~ !name }

/// type for held steps
hold = @{ "_" ~ !name }

/// arbitrary string identifier type
name = @{ (ASCII_ALPHANUMERIC | "_")+ }

repeat = { "!" }

/// possible literals for single steps
single = { hold | rest | number | chord | pitch | name }

choice_op = {"|"}
stack_op = {","}
split_op = {"."}

sections = _{ section ~ ((stack_op | split_op | choice_op) ~ section)* }

/// groups
subdivision     = { "[" ~ sections? ~ "]" }
alternating     = { "<" ~ sections? ~ ">" }

polymeter_tail  = { "%" ~  parameter }
polymeter       = { "{" ~ sections? ~ "}" ~ polymeter_tail? }

group     = _{ subdivision | alternating | polymeter }

/// parameter for expressions with operators
parameter = _{ expression | single | group }

/// static operators
op_replicate = ${ "!" ~ number }
op_weight    = ${ "@" ~ number? }
op_degrade   = ${ "?" ~ number? }

/// dynamic operators (only o_target can be chained)
op_fast      = { "*" ~ parameter }
op_slow      = { "/" ~ parameter }
op_target    = { ":" ~ parameter ~ (":" ~ parameter)* }

// this should actually be parameter as well 
// once bjorklund with patterns on the right is implemented
single_parameter = _{ single }
op_bjorklund = { "(" ~ (single_parameter ~ ",")+ ~ single_parameter ~ ")" }

op = _{ op_target | op_degrade | op_replicate | op_weight | op_fast | op_slow | op_bjorklund }

expression = { (single | group) ~ op+ }
range = ${ integer ~ ".." ~ integer }

/// helper container that splits steps into sections
section = _{ ( expression | range | single | repeat | group)+ }

/// the root of the cycle
mini = { SOI ~ sections? ~ EOI }
